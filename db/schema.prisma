// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model Organization {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  membership Membership[]
  products   Product[]
}

model Membership {
  id   Int            @id @default(autoincrement())
  role MembershipRole

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  isDefault Boolean
  // user can have maximum 2 memberships (1 from global & 1 for their own store)

  defaultAddress Address? @relation(fields: [addressId], references: [id])
  addressId      Int?

  // When the user joins, we will clear out the name and email and set the user.
  invitedName  String?
  invitedEmail String?

  @@unique([organizationId, invitedEmail])
}

enum MembershipRole {
  OWNER
  ADMIN
  USER
}

model User {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  name           String?
  email          String       @unique
  hashedPassword String?
  memberships    Membership[]

  tokens    Token[]
  sessions  Session[]
  ratings   Rating[]
  addresses Address[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgresql
// enum TokenType {
//   RESET_PASSWORD
// }

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sku         String
  // SKU Agregator
  title       String
  description String?

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int

  categories Category[]

  variants Variant[]
}

model Variant {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  sku String
  // SKU variant

  color String

  // Dimension
  length Float
  width  Float
  height Float

  weight Float

  ratings Rating[]
}

model Rating {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  variant   Variant @relation(fields: [variantId], references: [id])
  variantId Int

  rate    Float
  comment String
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  parent   Category @relation(fields: [parentId], references: [id])
  parentId Int

  Category Category[] @relation("CategoryToCategory")

  products Product[]
}

model Address {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title      String
  detail     String
  country    String
  city       String
  district   String
  street     String
  postalCode String

  User   User? @relation(fields: [userId], references: [id])
  userId Int?

  Membership Membership[]
}
